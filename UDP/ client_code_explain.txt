# Client.py Breakdown

## Overview
This script implements the client-side functionality of the UDP-based file transfer system. It allows the user to discover available files on the server and download specified files reliably using UDP. The script handles file requests, downloads, and ensures data integrity using sequence numbers and checksums.

---

## Line-by-Line Explanation

### **Imports**
```python
import socket
import os
import time
import struct
import sys
```
- **socket**: Provides network communication capabilities.
- **os**: Facilitates file and path operations.
- **time**: Used for implementing delays and timeouts.
- **struct**: Handles packing and unpacking binary data.
- **sys**: Allows access to system-specific parameters and exit methods.

---

### **Constants and Directories**
```python
SERVER_HOST = "127.0.0.1"
SERVER_PORT = 65432
CHUNK_SIZE = 1015
FORMAT = "utf-8"
INPUT_FILE = os.path.join(os.path.dirname(__file__), "input.txt")
DOWNLOAD_DIR = os.path.join(os.path.dirname(__file__), "downloads")
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

TIMEOUT = 2
MAX_RETRIES = 5
```
- **SERVER_HOST** and **SERVER_PORT**: Define the server's address and port.
- **CHUNK_SIZE**: The size of each data chunk (matching the server's configuration).
- **FORMAT**: Encoding format for communication.
- **INPUT_FILE**: Path to the file where requested file names are stored.
- **DOWNLOAD_DIR**: Directory where downloaded files are saved. It is created if not present.
- **TIMEOUT**: The duration to wait for responses before retrying.
- **MAX_RETRIES**: Maximum attempts for receiving a valid packet.

---

### **Helper Functions**

#### `display_progress`
```python
def display_progress(received, total):
    progress = int((received / total) * 100 // 5)
    print("[PROGRESS] [" + "=" * progress + " " * (20 - progress) + "]" + f" {received}/{total} bytes received.", end="\r")
```
- Displays a real-time progress bar for file downloads.

#### `get_available_files`
```python
def get_available_files():
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as client:
        client.sendto("LIST".encode(FORMAT), (SERVER_HOST, SERVER_PORT))
        data, _ = client.recvfrom(1024)
        return data.decode(FORMAT)
```
- Sends a `LIST` request to the server to retrieve the list of available files.

#### `checksum`
```python
def checksum(data):
    return sum(data) % 256
```
- Computes a simple checksum for error detection.

#### `download_file`
```python
def download_file(file_name):
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as client:
        client.settimeout(TIMEOUT)
        try:
            request_packet = f"REQUEST:{file_name}".encode(FORMAT)
            client.sendto(request_packet, (SERVER_HOST, SERVER_PORT))

            try:
                response, server_addr = client.recvfrom(CHUNK_SIZE)
                response = response.decode(FORMAT)

                if response.startswith("ERROR"):
                    print(f"[ERROR] {response}")
                    return

                _, file_size = response.split(":")
                file_size = int(file_size)
                print(f"[INFO] Downloading {file_name} ({file_size} bytes)...")

            except socket.timeout:
                print("[ERROR] No response from server.")
                return

            file_path = os.path.join(DOWNLOAD_DIR, file_name)
            with open(file_path, "wb") as f:
                bytes_received = 0
                expected_seq = 0

                while bytes_received < file_size:
                    for _ in range(MAX_RETRIES):
                        try:
                            packet, server_addr = client.recvfrom(CHUNK_SIZE + 9)
                            seq_num, chunk_len, received_checksum = struct.unpack("I I B", packet[:9])
                            chunk = packet[9:9 + chunk_len]

                            if checksum(chunk) == received_checksum and seq_num == expected_seq:
                                f.write(chunk)
                                bytes_received += chunk_len
                                display_progress(bytes_received, file_size)
                                ack_packet = struct.pack("I B", seq_num, 0)
                                client.sendto(ack_packet, server_addr)
                                expected_seq += 1
                                break
                            else:
                                ack_packet = struct.pack("I B", expected_seq - 1, 0)
                                client.sendto(ack_packet, server_addr)

                        except socket.timeout:
                            continue
                    else:
                        print("[ERROR] Max retries reached. Download failed.")
                        return

            print(f"\n[COMPLETE] {file_name} downloaded successfully.")

        except ConnectionRefusedError:
            print("[ERROR] Could not connect to the server.")
```
- Handles file download from the server, ensuring:
  - File integrity via checksum.
  - Correct ordering via sequence numbers.
  - Retransmission of missing or corrupted packets.

---

### **Main Functionality**

#### `main`
```python
def main():
    print("[CLIENT] Starting...")
    already_downloaded = set()

    while True:
        data = get_available_files()
        print("Available files:")
        print(data)
        print("| Please run file getInput.py to enter files you'd like to download.")
        print("| Press Enter to continue")
        print("| Press Ctrl + C to exit")
        input()

        if not os.path.exists(INPUT_FILE):
            print(f"[WARNING] {INPUT_FILE} not found.")
            time.sleep(5)
            continue

        try:
            with open(INPUT_FILE, "r") as f:
                files_to_download = {line.strip() for line in f if line.strip()}

            new_files = files_to_download - already_downloaded
            for file_name in new_files:
                download_file(file_name)
                already_downloaded.add(file_name)

        except ConnectionRefusedError as e:
            print(e)
            print("[CLIENT] Closing program in 3 seconds...")
            time.sleep(3)
            sys.exit()

        print("[INFO] Waiting for new files...")
        time.sleep(5)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Client out")
        exit()
```
- Displays available files from the server.
- Continuously monitors and downloads files listed in `input.txt`.
- Maintains a set of already downloaded files to avoid redundant downloads.
- Provides user instructions and handles graceful exits with `KeyboardInterrupt`.

---

## Key Features
1. **Reliable UDP Communication**:
   - Handles packet loss, corruption, and reordering.
2. **Dynamic File Discovery**:
   - Updates the list of available files in real-time.
3. **User-Friendly Operations**:
   - Guided instructions and feedback for smooth interaction.
4. **Error Handling**:
   - Handles timeouts, connection issues, and invalid server responses.

